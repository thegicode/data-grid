{
  "version": 3,
  "sources": ["../../src/scripts/models/DataModel.ts", "../../src/scripts/components/DataGrid.ts", "../../src/scripts/pages/data-grid.ts"],
  "sourcesContent": ["class DataModel {\n    private _records: DataItem[] = [];\n\n    constructor(initialData = []) {\n        this._records = Array.isArray(initialData) ? [...initialData] : [];\n    }\n\n    get records() {\n        return this._records.map((item) => ({ ...item }));\n    }\n\n    set records(newData) {\n        if (Array.isArray(newData)) {\n            this._records = newData.map((item) => ({ ...item }));\n        } else {\n            console.error(\"Data must be an array.\");\n        }\n    }\n\n    updateFieldValue(id: string, key: string, value: string) {\n        const index = this._records.findIndex((item) => item.id === id);\n        if (index !== -1) {\n            this._records[index] = {\n                ...this._records[index],\n                [key]: value,\n            };\n            console.log(this.records[index]); // \uC218\uC815\uB41C \uB370\uC774\uD130\uB97C \uCD9C\uB825\uD569\uB2C8\uB2E4.\n        } else {\n            console.error(`Record with id: ${id} not found.`);\n        }\n    }\n\n    updateRecordFields(updateData: DataItem) {\n        const { id, ...fieldsToUpdate } = updateData;\n        const recordIndex = this._records.findIndex((item) => item.id === id);\n\n        if (recordIndex !== -1) {\n            this._records[recordIndex] = {\n                ...this._records[recordIndex],\n                ...fieldsToUpdate,\n            };\n            console.log(this.records[recordIndex]); // \uC218\uC815\uB41C \uB370\uC774\uD130\uB97C \uCD9C\uB825\uD569\uB2C8\uB2E4.\n        } else {\n            console.error(`Record with id: ${id} not found.`);\n        }\n    }\n\n    // Method to add a new record to the data\n    // addRecord(record) {\n    //     if (record && typeof record === \"object\") {\n    //         this._records.push({ ...record });\n    //     } else {\n    //         console.error(\"Invalid record. Must be an object.\");\n    //     }\n    // }\n\n    // Method to update a record by index\n    // updateRecord(index, updatedRecord) {\n    //     if (index >= 0 && index < this._records.length) {\n    //         this._records[index] = { ...this._records[index], ...updatedRecord };\n    //     } else {\n    //         console.error(\"Invalid index for update.\");\n    //     }\n    // }\n\n    // Method to delete a record by index\n    // deleteRecord(index) {\n    //     if (index >= 0 && index < this._records.length) {\n    //         this._records.splice(index, 1);\n    //     } else {\n    //         console.error(\"Invalid index for deletion.\");\n    //     }\n    // }\n}\n\nexport default new DataModel();\n", "import dataModel from \"../models/DataModel\";\n\nexport default class DataGrid extends HTMLElement {\n    public dataModel;\n\n    constructor() {\n        super();\n\n        this.dataModel = dataModel;\n        // this.selection = new Selection(this);\n\n        // this.table = this.querySelector(\"table\");\n        // this.thead = this.querySelector(\"thead\");\n        // this.tbody = this.querySelector(\"tbody\");\n        // this.csvButton = this.querySelector(\".csv-button\");\n        // this.dataButton = this.querySelector(\".data-button\");\n\n        // this.isComposing = false;\n    }\n}\n", "import DataGrid from \"../components/DataGrid\";\n\ncustomElements.define(\"data-grid\", DataGrid);\n// customElements.define(\"string-cell\", StringCell);\n// customElements.define(\"text-number-cell\", TextNumberCell);\n// customElements.define(\"select-cell\", SelectCell);\n// customElements.define(\"checkbox-cell\", CheckboxCell);\n// customElements.define(\"datalist-cell\", DatalistCell);\n"],
  "mappings": "kmBAAA,IAAMA,EAAN,KAAgB,CAGZ,YAAYC,EAAc,CAAC,EAAG,CAF9B,KAAQ,SAAuB,CAAC,EAG5B,KAAK,SAAW,MAAM,QAAQA,CAAW,EAAI,CAAC,GAAGA,CAAW,EAAI,CAAC,CACrE,CAEA,IAAI,SAAU,CACV,OAAO,KAAK,SAAS,IAAKC,GAAUC,EAAA,GAAKD,EAAO,CACpD,CAEA,IAAI,QAAQE,EAAS,CACb,MAAM,QAAQA,CAAO,EACrB,KAAK,SAAWA,EAAQ,IAAKF,GAAUC,EAAA,GAAKD,EAAO,EAEnD,QAAQ,MAAM,wBAAwB,CAE9C,CAEA,iBAAiBG,EAAYC,EAAaC,EAAe,CACrD,IAAMC,EAAQ,KAAK,SAAS,UAAWN,GAASA,EAAK,KAAOG,CAAE,EAC1DG,IAAU,IACV,KAAK,SAASA,GAASC,EAAAN,EAAA,GAChB,KAAK,SAASK,IADE,CAEnB,CAACF,GAAMC,CACX,GACA,QAAQ,IAAI,KAAK,QAAQC,EAAM,GAE/B,QAAQ,MAAM,mBAAmBH,cAAe,CAExD,CAEA,mBAAmBK,EAAsB,CACrC,IAAkCC,EAAAD,EAA1B,IAAAL,CAjChB,EAiC0CM,EAAnBC,EAAAC,EAAmBF,EAAnB,CAAP,OACFG,EAAc,KAAK,SAAS,UAAWZ,GAASA,EAAK,KAAOG,CAAE,EAEhES,IAAgB,IAChB,KAAK,SAASA,GAAeX,IAAA,GACtB,KAAK,SAASW,IACdF,GAEP,QAAQ,IAAI,KAAK,QAAQE,EAAY,GAErC,QAAQ,MAAM,mBAAmBT,cAAe,CAExD,CA4BJ,EAEOU,EAAQ,IAAIf,ECzEnB,IAAqBgB,EAArB,cAAsC,WAAY,CAG9C,aAAc,CACV,MAAM,EAEN,KAAK,UAAYC,CAUrB,CACJ,ECjBA,eAAe,OAAO,YAAaC,CAAQ",
  "names": ["DataModel", "initialData", "item", "__spreadValues", "newData", "id", "key", "value", "index", "__spreadProps", "updateData", "_a", "fieldsToUpdate", "__objRest", "recordIndex", "DataModel_default", "DataGrid", "DataModel_default", "DataGrid"]
}
